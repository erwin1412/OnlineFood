// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/transaction_detail.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionDetailService_CreateTransactionDetail_FullMethodName  = "/transaction_detail.TransactionDetailService/CreateTransactionDetail"
	TransactionDetailService_GetAllTransactionDetail_FullMethodName  = "/transaction_detail.TransactionDetailService/GetAllTransactionDetail"
	TransactionDetailService_GetByIdTransactionDetail_FullMethodName = "/transaction_detail.TransactionDetailService/GetByIdTransactionDetail"
	TransactionDetailService_UpdateTransactionDetail_FullMethodName  = "/transaction_detail.TransactionDetailService/UpdateTransactionDetail"
	TransactionDetailService_DeleteTransactionDetail_FullMethodName  = "/transaction_detail.TransactionDetailService/DeleteTransactionDetail"
)

// TransactionDetailServiceClient is the client API for TransactionDetailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionDetailServiceClient interface {
	CreateTransactionDetail(ctx context.Context, in *CreateTransactionDetailReqeuest, opts ...grpc.CallOption) (*TransactionDetailResponse, error)
	GetAllTransactionDetail(ctx context.Context, in *EmptyTransactionDetail, opts ...grpc.CallOption) (*TransactionDetailResponse, error)
	GetByIdTransactionDetail(ctx context.Context, in *GetByIdTransactionDetailReqeuest, opts ...grpc.CallOption) (*TransactionDetailResponse, error)
	UpdateTransactionDetail(ctx context.Context, in *UpdateTransactionDetailReqeuest, opts ...grpc.CallOption) (*TransactionDetailResponse, error)
	DeleteTransactionDetail(ctx context.Context, in *DeleteTransactionDetailRequest, opts ...grpc.CallOption) (*DeleteTransactionDetailResponse, error)
}

type transactionDetailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionDetailServiceClient(cc grpc.ClientConnInterface) TransactionDetailServiceClient {
	return &transactionDetailServiceClient{cc}
}

func (c *transactionDetailServiceClient) CreateTransactionDetail(ctx context.Context, in *CreateTransactionDetailReqeuest, opts ...grpc.CallOption) (*TransactionDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionDetailResponse)
	err := c.cc.Invoke(ctx, TransactionDetailService_CreateTransactionDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionDetailServiceClient) GetAllTransactionDetail(ctx context.Context, in *EmptyTransactionDetail, opts ...grpc.CallOption) (*TransactionDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionDetailResponse)
	err := c.cc.Invoke(ctx, TransactionDetailService_GetAllTransactionDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionDetailServiceClient) GetByIdTransactionDetail(ctx context.Context, in *GetByIdTransactionDetailReqeuest, opts ...grpc.CallOption) (*TransactionDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionDetailResponse)
	err := c.cc.Invoke(ctx, TransactionDetailService_GetByIdTransactionDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionDetailServiceClient) UpdateTransactionDetail(ctx context.Context, in *UpdateTransactionDetailReqeuest, opts ...grpc.CallOption) (*TransactionDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionDetailResponse)
	err := c.cc.Invoke(ctx, TransactionDetailService_UpdateTransactionDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionDetailServiceClient) DeleteTransactionDetail(ctx context.Context, in *DeleteTransactionDetailRequest, opts ...grpc.CallOption) (*DeleteTransactionDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTransactionDetailResponse)
	err := c.cc.Invoke(ctx, TransactionDetailService_DeleteTransactionDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionDetailServiceServer is the server API for TransactionDetailService service.
// All implementations must embed UnimplementedTransactionDetailServiceServer
// for forward compatibility.
type TransactionDetailServiceServer interface {
	CreateTransactionDetail(context.Context, *CreateTransactionDetailReqeuest) (*TransactionDetailResponse, error)
	GetAllTransactionDetail(context.Context, *EmptyTransactionDetail) (*TransactionDetailResponse, error)
	GetByIdTransactionDetail(context.Context, *GetByIdTransactionDetailReqeuest) (*TransactionDetailResponse, error)
	UpdateTransactionDetail(context.Context, *UpdateTransactionDetailReqeuest) (*TransactionDetailResponse, error)
	DeleteTransactionDetail(context.Context, *DeleteTransactionDetailRequest) (*DeleteTransactionDetailResponse, error)
	mustEmbedUnimplementedTransactionDetailServiceServer()
}

// UnimplementedTransactionDetailServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionDetailServiceServer struct{}

func (UnimplementedTransactionDetailServiceServer) CreateTransactionDetail(context.Context, *CreateTransactionDetailReqeuest) (*TransactionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionDetail not implemented")
}
func (UnimplementedTransactionDetailServiceServer) GetAllTransactionDetail(context.Context, *EmptyTransactionDetail) (*TransactionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransactionDetail not implemented")
}
func (UnimplementedTransactionDetailServiceServer) GetByIdTransactionDetail(context.Context, *GetByIdTransactionDetailReqeuest) (*TransactionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByIdTransactionDetail not implemented")
}
func (UnimplementedTransactionDetailServiceServer) UpdateTransactionDetail(context.Context, *UpdateTransactionDetailReqeuest) (*TransactionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransactionDetail not implemented")
}
func (UnimplementedTransactionDetailServiceServer) DeleteTransactionDetail(context.Context, *DeleteTransactionDetailRequest) (*DeleteTransactionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransactionDetail not implemented")
}
func (UnimplementedTransactionDetailServiceServer) mustEmbedUnimplementedTransactionDetailServiceServer() {
}
func (UnimplementedTransactionDetailServiceServer) testEmbeddedByValue() {}

// UnsafeTransactionDetailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionDetailServiceServer will
// result in compilation errors.
type UnsafeTransactionDetailServiceServer interface {
	mustEmbedUnimplementedTransactionDetailServiceServer()
}

func RegisterTransactionDetailServiceServer(s grpc.ServiceRegistrar, srv TransactionDetailServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionDetailServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionDetailService_ServiceDesc, srv)
}

func _TransactionDetailService_CreateTransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionDetailReqeuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionDetailServiceServer).CreateTransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionDetailService_CreateTransactionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionDetailServiceServer).CreateTransactionDetail(ctx, req.(*CreateTransactionDetailReqeuest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionDetailService_GetAllTransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyTransactionDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionDetailServiceServer).GetAllTransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionDetailService_GetAllTransactionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionDetailServiceServer).GetAllTransactionDetail(ctx, req.(*EmptyTransactionDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionDetailService_GetByIdTransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdTransactionDetailReqeuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionDetailServiceServer).GetByIdTransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionDetailService_GetByIdTransactionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionDetailServiceServer).GetByIdTransactionDetail(ctx, req.(*GetByIdTransactionDetailReqeuest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionDetailService_UpdateTransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionDetailReqeuest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionDetailServiceServer).UpdateTransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionDetailService_UpdateTransactionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionDetailServiceServer).UpdateTransactionDetail(ctx, req.(*UpdateTransactionDetailReqeuest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionDetailService_DeleteTransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionDetailServiceServer).DeleteTransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionDetailService_DeleteTransactionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionDetailServiceServer).DeleteTransactionDetail(ctx, req.(*DeleteTransactionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionDetailService_ServiceDesc is the grpc.ServiceDesc for TransactionDetailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionDetailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction_detail.TransactionDetailService",
	HandlerType: (*TransactionDetailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransactionDetail",
			Handler:    _TransactionDetailService_CreateTransactionDetail_Handler,
		},
		{
			MethodName: "GetAllTransactionDetail",
			Handler:    _TransactionDetailService_GetAllTransactionDetail_Handler,
		},
		{
			MethodName: "GetByIdTransactionDetail",
			Handler:    _TransactionDetailService_GetByIdTransactionDetail_Handler,
		},
		{
			MethodName: "UpdateTransactionDetail",
			Handler:    _TransactionDetailService_UpdateTransactionDetail_Handler,
		},
		{
			MethodName: "DeleteTransactionDetail",
			Handler:    _TransactionDetailService_DeleteTransactionDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/transaction_detail.proto",
}
