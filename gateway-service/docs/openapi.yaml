openapi: 3.1.0
info:
  title: Online Food Final Project Hacktiv8 API
  version: 1.0.0
servers:
  - url: http://34.34.216.205:8032

paths:
  /register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
                role: { type: string }
                name: { type: string }
                phone: { type: string }
                alamat: { type: string }
      responses:
        '200': { description: OK }

  /login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200': { description: OK }

  /couriers:
    get:
      summary: Get all couriers
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: OK }
    post:
      summary: Create new courier
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lat: { type: string }
                long: { type: string }
                vehicle_number: { type: string }
                status: { type: string }
      responses:
        '200': { description: OK }

  /couriers/{id}:
    get:
      summary: Get courier by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    put:
      summary: Update courier lat long
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lat: { type: string }
                long: { type: string }
      responses:
        '200': { description: OK }
    delete:
      summary: Delete courier by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /couriers/longlat/{lat}/{long}:
    get:
      summary: Get courier by coordinates
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: lat
          required: true
          schema: { type: string }
        - in: path
          name: long
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /merchants:
    get:
      summary: Get all merchants
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: OK }
    post:
      summary: Create merchant
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name_merchant: { type: string }
                alamat: { type: string }
                open_hour: { type: string }
                close_hour: { type: string }
                status: { type: string }
      responses:
        '200': { description: OK }

  /merchants/{id}:
    get:
      summary: Get merchant by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    put:
      summary: Update merchant
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name_merchant: { type: string }
                alamat: { type: string }
                open_hour: { type: string }
                close_hour: { type: string }
                status: { type: string }
      responses:
        '200': { description: OK }
    delete:
      summary: Delete merchant by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /merchants/user:
    get:
      summary: Get merchant by user ID
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: OK }

  /foods:
    get:
      summary: Get all foods
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: OK }
    post:
      summary: Create food
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name_foods: { type: string }
                price: { type: integer }
                availability: { type: string }
      responses:
        '200': { description: OK }

  /foods/{id}:
    get:
      summary: Get food by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    put:
      summary: Update food
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name_foods: { type: string }
                price: { type: integer }
                availability: { type: string }
      responses:
        '200': { description: OK }
    delete:
      summary: Delete food by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /carts:
    get:
      summary: Get all carts
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: OK }
    post:
      summary: Add item to cart
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                merchant_id: { type: string }
                food_id: { type: string }
                user_id: { type: string }
                qty: { type: integer }
      responses:
        '200': { description: OK }

  /carts/{id}:
    get:
      summary: Get cart by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    put:
      summary: Update cart
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                merchant_id: { type: string }
                food_id: { type: string }
                user_id: { type: string }
                qty: { type: integer }
      responses:
        '200': { description: OK }
    delete:
      summary: Delete cart by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

  /transactions:
    get:
      summary: Get all transactions
      security: [ { bearerAuth: [] } ]
      responses:
        '200': { description: OK }
    post:
      summary: Create transaction
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id: { type: string }
                courier_id: { type: string }
                merchant_id: { type: string }
                total: { type: integer }
                status: { type: string }
                snap_token: { type: string }
                details:
                  type: array
                  items:
                    type: object
                    properties:
                      food_id: { type: string }
                      merchant_id: { type: string }
                      qty: { type: integer }
                      price: { type: integer }
      responses:
        '200': { description: OK }

  /transactions/{id}:
    get:
      summary: Get transaction by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
    put:
      summary: Update transaction
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id: { type: string }
                courier_id: { type: string }
                merchant_id: { type: string }
                total: { type: integer }
                status: { type: string }
                snap_token: { type: string }
      responses:
        '200': { description: OK }
    delete:
      summary: Delete transaction by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
