// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/courier.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CourierService_CreateCourier_FullMethodName        = "/courier.CourierService/CreateCourier"
	CourierService_GetById_FullMethodName              = "/courier.CourierService/GetById"
	CourierService_GetByLongLat_FullMethodName         = "/courier.CourierService/GetByLongLat"
	CourierService_UpdateLongLatCourier_FullMethodName = "/courier.CourierService/UpdateLongLatCourier"
	CourierService_DeleteCourier_FullMethodName        = "/courier.CourierService/DeleteCourier"
	CourierService_GetAllCouriers_FullMethodName       = "/courier.CourierService/GetAllCouriers"
)

// CourierServiceClient is the client API for CourierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourierServiceClient interface {
	CreateCourier(ctx context.Context, in *CreateCourierRequest, opts ...grpc.CallOption) (*CourierResponse, error)
	GetById(ctx context.Context, in *GetByIdCourierRequest, opts ...grpc.CallOption) (*CourierResponse, error)
	GetByLongLat(ctx context.Context, in *GetByLongLatCourierRequest, opts ...grpc.CallOption) (*CourierResponse, error)
	UpdateLongLatCourier(ctx context.Context, in *UpdateLongLatCourierRequest, opts ...grpc.CallOption) (*CourierResponse, error)
	DeleteCourier(ctx context.Context, in *DeleteCourierRequest, opts ...grpc.CallOption) (*DeleteCourierResponse, error)
	GetAllCouriers(ctx context.Context, in *EmptyCourier, opts ...grpc.CallOption) (*CourierListResponse, error)
}

type courierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourierServiceClient(cc grpc.ClientConnInterface) CourierServiceClient {
	return &courierServiceClient{cc}
}

func (c *courierServiceClient) CreateCourier(ctx context.Context, in *CreateCourierRequest, opts ...grpc.CallOption) (*CourierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourierResponse)
	err := c.cc.Invoke(ctx, CourierService_CreateCourier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierServiceClient) GetById(ctx context.Context, in *GetByIdCourierRequest, opts ...grpc.CallOption) (*CourierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourierResponse)
	err := c.cc.Invoke(ctx, CourierService_GetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierServiceClient) GetByLongLat(ctx context.Context, in *GetByLongLatCourierRequest, opts ...grpc.CallOption) (*CourierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourierResponse)
	err := c.cc.Invoke(ctx, CourierService_GetByLongLat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierServiceClient) UpdateLongLatCourier(ctx context.Context, in *UpdateLongLatCourierRequest, opts ...grpc.CallOption) (*CourierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourierResponse)
	err := c.cc.Invoke(ctx, CourierService_UpdateLongLatCourier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierServiceClient) DeleteCourier(ctx context.Context, in *DeleteCourierRequest, opts ...grpc.CallOption) (*DeleteCourierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCourierResponse)
	err := c.cc.Invoke(ctx, CourierService_DeleteCourier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierServiceClient) GetAllCouriers(ctx context.Context, in *EmptyCourier, opts ...grpc.CallOption) (*CourierListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourierListResponse)
	err := c.cc.Invoke(ctx, CourierService_GetAllCouriers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourierServiceServer is the server API for CourierService service.
// All implementations must embed UnimplementedCourierServiceServer
// for forward compatibility.
type CourierServiceServer interface {
	CreateCourier(context.Context, *CreateCourierRequest) (*CourierResponse, error)
	GetById(context.Context, *GetByIdCourierRequest) (*CourierResponse, error)
	GetByLongLat(context.Context, *GetByLongLatCourierRequest) (*CourierResponse, error)
	UpdateLongLatCourier(context.Context, *UpdateLongLatCourierRequest) (*CourierResponse, error)
	DeleteCourier(context.Context, *DeleteCourierRequest) (*DeleteCourierResponse, error)
	GetAllCouriers(context.Context, *EmptyCourier) (*CourierListResponse, error)
	mustEmbedUnimplementedCourierServiceServer()
}

// UnimplementedCourierServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCourierServiceServer struct{}

func (UnimplementedCourierServiceServer) CreateCourier(context.Context, *CreateCourierRequest) (*CourierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourier not implemented")
}
func (UnimplementedCourierServiceServer) GetById(context.Context, *GetByIdCourierRequest) (*CourierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCourierServiceServer) GetByLongLat(context.Context, *GetByLongLatCourierRequest) (*CourierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByLongLat not implemented")
}
func (UnimplementedCourierServiceServer) UpdateLongLatCourier(context.Context, *UpdateLongLatCourierRequest) (*CourierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLongLatCourier not implemented")
}
func (UnimplementedCourierServiceServer) DeleteCourier(context.Context, *DeleteCourierRequest) (*DeleteCourierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourier not implemented")
}
func (UnimplementedCourierServiceServer) GetAllCouriers(context.Context, *EmptyCourier) (*CourierListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCouriers not implemented")
}
func (UnimplementedCourierServiceServer) mustEmbedUnimplementedCourierServiceServer() {}
func (UnimplementedCourierServiceServer) testEmbeddedByValue()                        {}

// UnsafeCourierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourierServiceServer will
// result in compilation errors.
type UnsafeCourierServiceServer interface {
	mustEmbedUnimplementedCourierServiceServer()
}

func RegisterCourierServiceServer(s grpc.ServiceRegistrar, srv CourierServiceServer) {
	// If the following call pancis, it indicates UnimplementedCourierServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CourierService_ServiceDesc, srv)
}

func _CourierService_CreateCourier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierServiceServer).CreateCourier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierService_CreateCourier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierServiceServer).CreateCourier(ctx, req.(*CreateCourierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdCourierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierServiceServer).GetById(ctx, req.(*GetByIdCourierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierService_GetByLongLat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByLongLatCourierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierServiceServer).GetByLongLat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierService_GetByLongLat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierServiceServer).GetByLongLat(ctx, req.(*GetByLongLatCourierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierService_UpdateLongLatCourier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLongLatCourierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierServiceServer).UpdateLongLatCourier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierService_UpdateLongLatCourier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierServiceServer).UpdateLongLatCourier(ctx, req.(*UpdateLongLatCourierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierService_DeleteCourier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierServiceServer).DeleteCourier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierService_DeleteCourier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierServiceServer).DeleteCourier(ctx, req.(*DeleteCourierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierService_GetAllCouriers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyCourier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierServiceServer).GetAllCouriers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierService_GetAllCouriers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierServiceServer).GetAllCouriers(ctx, req.(*EmptyCourier))
	}
	return interceptor(ctx, in, info, handler)
}

// CourierService_ServiceDesc is the grpc.ServiceDesc for CourierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "courier.CourierService",
	HandlerType: (*CourierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCourier",
			Handler:    _CourierService_CreateCourier_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _CourierService_GetById_Handler,
		},
		{
			MethodName: "GetByLongLat",
			Handler:    _CourierService_GetByLongLat_Handler,
		},
		{
			MethodName: "UpdateLongLatCourier",
			Handler:    _CourierService_UpdateLongLatCourier_Handler,
		},
		{
			MethodName: "DeleteCourier",
			Handler:    _CourierService_DeleteCourier_Handler,
		},
		{
			MethodName: "GetAllCouriers",
			Handler:    _CourierService_GetAllCouriers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/courier.proto",
}
